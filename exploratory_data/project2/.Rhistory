hw1_2 <- hw1[complete.cases(hw1),]
sapply(hw1_2, function(x) mean(x))
hw1_2$Ozone
hw1_2$Ozone > 31
hw1$Ozone[hw1_2$Ozone > 31]
hw1_2$Ozone > 31 & hw1_2$Temp > 90
mean(hw1_2$Solar.R[hw1_2$Ozone > 31 & hw1_2$Temp > 90])
mean(hw1_2$temp[hw1_2$month = 6])
mean(hw1_2$temp[hw1_2$month == 6])
mean(hw1_2$Temp[hw1_2$Month == 6])
hw1_2$Month == 6
max(hw1_2$Temp[hw1_2$Month == 6])
max(hw1_2$Ozone[hw1_2$Month == 5])
hw1_2$Month == 6
hw1_2
hw1_2$Month
hw1_2[Month]
hw1_2["Month"]
hw1_2["Month" == 6]
hw1_2$Month == 6
max(hw1_2$Temp[hw1_2$Month == 6,])
max(hw1_2$Temp[hw1_2$Month == 6])
mean(hw1_2$Temp[hw1_2$Month == 6])
mean(hw1_2$Temp[hw1_2$Month == 6])
max(hw1_2$Ozone[hw1_2$Month == 5])
mean(hw1_2$Temp)
mean(hw1_2$Temp[hw1_2$Month == 6])
mean(hw1_2[hw1_2$Month == 6])
mean(hw1_2[hw1_2$Month == 6,])
mean(hw1_2$Temp[hw1_2$Month == 6])
hw1
hw1_2
hw1_2[,"Temp",drop=F]
hw1_2[,Temp,drop=F]
hw1_2[,"Temp",drop=F]
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
z, 555, z
z, 555
c(z,555,z)
z * 2
z * 2  + 100
sqrt(z-1)
mySqrt <- sqrt(z-1)
mySrt
mySqrt
myDiv <- z / mySqrt
myDiv
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
swirl()
library(swirl)
swirl()
1:20
pi:10
51:1
15:1
?:
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
lenth(my_seq)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2))
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
c(.5, 55, -10, 6)
num_vect(.5, 55, -10, 6)
num_vect <- c(.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
C(my_char,"Moses")
my_name <- C(my_char,"Moses")
my_name <- c(my_char,"Moses")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("x","y","z"), sep=" ")
paste(1:3, c("x","y","z"), sep="")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44,NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y,z), 100)
is.na()
is.na(myData)
myNa <- is.na(myData)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA == True)
sum(myNA == T)
sum(myNA)
myData
NaN / 0
0/0
Inf - Inf
x
X[1:10]
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0 ]
x[ x > 0\]
x[ x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf = NA)
vect
naems(vect)
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("for","bar")]
vect[c("foo","bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
matrix(1:20, 4,5)
myMatrix2 <- matrix(1:20, 4,5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient","age","weight","bp","rating","test")
?colnames
colnames(myData) <- cnames
myData
add2
add2(3,5)
add2(3,5)
}
}
add2(3,5)
add2 <- function(x, y) {
x + y
}
add2(1,2)
source('C:/webwork/r_programming/functions.r', echo=TRUE)
source('C:/webwork/r_programming/functions.r', echo=TRUE)
lm <- function(x) {x *x}
lm(5)
source('~/.active-rstudio-document', echo=TRUE)
z <- 10
f(3)
source('~/.active-rstudio-document', echo=TRUE)
y
x <- list(a = 1:5, b=rnorm(10))
lapply(x,mean)
x <- 1:4
lapply(x,runif)
?solve
c=rbind(c(1, -1/4), c(-1/4, 1))
solve(c)
makeCacheMatrix(c)
source('C:/webwork/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix(c)
x <- makeCacheMatrix(c)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)%*%c
outcome <- read.csv("c:/webwork/datasciencecoursera/r_programming/assigment3/outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("c:/webwork/datasciencecoursera/r_programming/assignment3/outcome-of-care-measures.csv", colClasses = "character")
head(outcomes)
head(outcome)
ncol(outcome)
rows(outcome)
nrows(outcome)
nrow(outcome)
names(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
names(outcome)
outcome$state
outcome$State
"TX" %in% outcome$State
"ab" %in% outcome$State
?stop
stop("ab" %in% outcome$State)
stop("MD" %in% outcome$State)
geterrmessage
geterrmessage()
stop("too many iterations")
geterrmessage()
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("MZ","asdaf")
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("MZ","asdaf")
best("MD","asdaf")
head(outcome)
names(outcome)
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("MD","asdaf")
best("MD","heart attack")
best("MD","heart attack")
best("MD","heart atta")
best("MD","heart atta")
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("MD","heart atta")
best("MZ","heart atta")
head(outcome)
names(outcome)
outcome[,11]
outcome[State == "MD"]
outcome$State[State == "MD"]
outcome$State["MD"]
outcome$State
outcome$State == MD
outcome$State == "MD"
outcome[outcome$State == "MD"]
outcome[][outcome$State == "MD"]
outcome[outcome$State == "MD"][]
outcome$State == "MD"
outcome[[outcome$State == "MD"]]
outcome[outcome$State == "MD"]
outcome$outcome$State == "MD"
outcome[,outcome$State == "MD"]
outcome.df
x.sub <- subset(outcome, outcome$State =="Md")
x.sub <- subset(outcome, outcome$State =="MD")
x.sub
outcome[outcome$State == "MD",]
x.sub <- outcome[outcome$State == "MD",]
names(x.sub)
x.sub[,11]
subset(x.sub,min(x.sub[,11]))
x.sub[,11]
min(x.sub[,11])
min(x.sub[,11],na.rm=TRUE)
minrow(x.sub[,11],na.rm=TRUE)
outcome[which(outcome$State == "MD"),]
x.sub <- outcome[which(outcome$State == "MD"),]
names(x.sub)
x.sub <- outcome[which(outcome$State == "MD"),]
names(x.sub)
min(x.sub[,11],na.rm=TRUE)
outcome[which(outcome$State == "MD" & min(x.sub[,11],na.rm=TRUE)),]
outcome[which(outcome$State == "MD"),]
x.sub
subset(x.sub,x.sub[,11] == min(x.sub[,11],na.rm=TRUE))
out <- subset(x.sub,x.sub[,11] == min(x.sub[,11],na.rm=TRUE))
out[,11]
names(out)
out[,2]
out[,1]
out[,4]
out[,5]
out[,7]
??with
?with
?order
x.sub[order(x.sub[,11]),]
out <- x.sub[order(x.sub[,11])]
out[,11]
out
out <- x.sub[order(x.sub[,11]),]
out[,11]
out[,11][0]
out <- x.sub[order(x.sub[,11],decreasing=T),]
out[,11][0]
out[,11]
names(outcome)
a <- 1
$a
a
source('~/.active-rstudio-document', echo=TRUE)
best("TX","heart attack")
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("TX","heart attack")
out
out[,11]
out <- best("TX","heart attack")
out
outcome[which(outcome$State == "TX"]
outcome[which(outcome$State == "TX")]
outcome
outcome[which(outcome$State == "TX"),]
x.sub <- outcome[which(outcome$State == "TX"),]
out <- subset(x.sub,x.sub[,11] == min(x.sub[,11],na.rm=TRUE))
out[,11]
names(out)
out[,2]
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("TX","heart attack")
hospital
print("hello")
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("TX","heart attack")
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("TX","heart attack")
best("TX","heart failure")
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
out <- NA
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("TX","heart failure")
best("TX","heart failure")
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("TX","heart failure")
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("TX","heart failure")
best
out <- best("TX","heart failure")
out
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("TX","heart failure")
x = best("TX","heart failure")
x <- best("TX","heart failure")
x
order(x)
sort(x)
best("TX","heart attack")
x <- best("TX","heart failure")
x
x[1]
x[2]
x[3]
x[4]
outcome
name(outcome)
names(outcome)
best("TX","heart failure")
best("TX","heart failure1")
best("TX","heart failure")
best("MD","heart attack")
best("MD","pneumonia")
data <- read.csv("c:/webwork/datasciencecoursera/r_programming/assignment3/outcome-of-care-measures.csv", colClasses = "character")
state <- "TX"
data.state <- subset(data, data$State ==state)   # filters state out of data frame
data.state
data.state
names(data.state_
;''
l
)
names(data.state)
out <- subset(data.state,data.state[,17] == min(data.state[,17],na.rm=TRUE))[,2] # searches for lowest heart attack rate
out
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
outcome[, 17] <- as.numeric(outcome[, 17])
hist(outcome[, 17])
outcome[, 23] <- as.numeric(outcome[, 23])
hist(outcome[, 23])
out <- subset(data.state,data.state[,17] == min(data.state[,17],na.rm=TRUE))
out
out[,2]
out[,11]
data.state[,17]
outcome[, 17] <- as.numeric(outcome[, 17])
outcome
min(outcome[, 17])
out <- subset(data.state,data.state[,17] == min(as.numeric(data.state[,17]),na.rm=TRUE))[,2] # searches for lowest heart attack rate
out
source('~/.active-rstudio-document', echo=TRUE)
best("TX","heart failure")
best("MD","pneumonia")
out <- subset(data.state,data.state[,17] == min(data.state[,17],na.rm=TRUE))[,2] # searches for lowest heart attack rate
out
sort(out)
sort(out)[0]
sort(out)[1,]
sort(out)[1]
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("MD","pneumonia")
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("MD","pneumonia")
best("TX","heart attack")
source('~/.active-rstudio-document', echo=TRUE)
best("TX","heart attack")
best("TX","heart failure")
best("TX","heart attack")
source('~/.active-rstudio-document', echo=TRUE)
best("TX","heart attack")
best("TX","heart attack")
out <- subset(data.state,data.state[,11] == min(data.state[,11],na.rm=TRUE))[,2] # searches for lowest heart attack rate
out
out <- subset(data.state,data.state[,11] == min(as.numeric(data.state[,11]),na.rm=TRUE))[,2] # searches for lowest heart attack rate
out
min(as.numeric(data.state[,11]),na.rm=TRUE)
min(data.state[,11],na.rm=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
best("TX","heart attack")
best("TX","heart attack")
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("TX","heart attack")
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("TX","heart attack")
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
source('C:/webwork/datasciencecoursera/r_programming/assignment3/best.r', echo=TRUE)
best("TX","heart attack")
best("TX","heart failure")
set.seed(1)
rpois(5,2)
library(datasets)
Rprof()
fit <-lm(y ~x1+x2)
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
par(mar=c(2,2,2,2))
plot(x,y)
par(mar=c(4,4,2,2))
plot(x,y)
plot(x,y, pch=20)
plot(x,y, pch=19)
plot(x,y, pch=4)
plot(x,y, pch=2)
plot(x,y, pch=20)
title("Scatterplot")
text(-2, -2, "Label")
legend("topleft", legend="Data")
legend("topleft", legend="data", pch=20)
fot <- lm( l- x)
fot <- lm( l~ x)
fot <- lm( y~ x)
fot <- lm( y- x)
abline(fit)
fit <- lm( y- x)
fit <- lm( y ~ x)
abline(fit)
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
R.version
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL')
s1 <- seq(1,10, by = 2)
s1
s1 <- seq(1,10, by = 2) ; s1
yesno <- sample(c("yes","no", size=10, replace=TRUE)
)
yesno
yesnofac = factor(yesno, levels=c("yes","no"))
mtcars
library(reshape2)
head(mtcars)
mtcars$carname
mtcars$carname <- rownames(mtcars)
head(mtcars)
carMelt <- melt(mtcars, id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))
carMelt
head(mtcars)\
head(mtcars)
cylData <- dcast(carMelt, cyl ~ variable)
?factor
?trellis.par.set
source('C:/webwork/datasciencecoursera/exploratory_data/project1/plot1.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/webwork/datasciencecoursera/exploratory_data/project2/plot2.R', echo=TRUE)
source('C:/webwork/datasciencecoursera/exploratory_data/project2/plot6.R', echo=TRUE)
source('C:/webwork/datasciencecoursera/exploratory_data/project2/plot3.R', echo=TRUE)
source('C:/webwork/datasciencecoursera/exploratory_data/project2/plot6.R', echo=TRUE)
source('C:/webwork/datasciencecoursera/exploratory_data/project2/plot6.R', echo=TRUE)
source('C:/webwork/datasciencecoursera/exploratory_data/project2/plot4.R', echo=TRUE)
source('C:/webwork/datasciencecoursera/exploratory_data/project2/plot4.R', echo=TRUE)
g + expand_limits(x = 0, y = 0)
source('C:/webwork/datasciencecoursera/exploratory_data/project2/plot4.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/webwork/datasciencecoursera/exploratory_data/project2/plot5.R', echo=TRUE)
